{"name":"Jpservant","tagline":"Java-Persistent Simple Servant","body":"## 内容\r\n\r\n* HTML5時代のリッチクライアントWebアプリケーション向けに、各種の共有ストレージ（サーバーサイドのRDBMS、KVS、\r\nファイルシステム等）アクセスを行うREST APIを、必要最低限のセットアップで提供する仕組みを構築します。\r\n* 「必要最低限のセットアップ」については、”設定より規約”（convention over configuration：以降CoC）\r\nの考え方で、可能な限りの単純化を目指します。\r\n\r\n### 例えば…\r\n\r\n* O/Rマッピングツールが提供するようなRDBMSアクセスであれば、REST URLごとにテーブルに、また\r\nGET、PUT、POST、DELETEの各メソッドを当該テーブルの操作に、プログラムレスで自動的にマッピングします。\r\n対象データベースのスキーマ定義を実行時に解析し、提供可能なREST URLを動的生成します。\r\n* カスタムSQLベースのRDBMSアクセスであれば、URLを「SQL文を記載したファイル」に紐づけます。\r\nSQLに名前付きプレースホルダを設定することで、JPServantが受信したJSON形式の属性データを自動的にプレース\r\nホルダへバインドします。レスポンスはそのままJSONのリスト形式データにして返します。このとき、定義済みSQL\r\nファイルのシステム内での位置をそのままREST URLにマッピングします。\r\n* ファイルシステム、あるいはGoogle Cloud Storageのような各種のファイルストレージの位置を指定するだけで、\r\n当該ストレージに対するWebDAV APIを自動的に提供します。\r\n\r\n### その他考えている機能\r\n\r\n* トランザクション\r\n* ユーザー認証、ロール管理\r\n* アクセスログ、各種レポーティング\r\n* Publish-Subscribe モデルのサポート（WebSocketでサーバープッシュ）\r\n* 各種の著名なPaaSのサポート\r\n* プラッガブルアーキテクチャ - 追加機能開発を行うためのSPI提供\r\n\r\n## 目的\r\n* HTML5ベースのリッチGUIアプリケーション開発をいじり倒してみたいと思い立ったのですが、\r\nサーバーサイドで面倒かつ毎回同じような開発を繰り返すことになりそうで、うんざりしたので。\r\nうんざりを自動化するのが、プログラマの仕事ですよね。\r\n\r\n## なんで\"Servant\"？\r\n* **\"Server\"とか\"Framework\"とか、上から目線の偉そうな響きがいや**だったので。  \r\n･･･色々苦労したってことで、万事お察しください。[Jenkins][1]のロゴの執事さんのように\r\n「必要なことを、ユーザーを苦労させずに勝手にやってくれる便利な人」のイメージにしたい、\r\nという思いがあります。必死に大量の設定ファイルだのアノテーションだのと自分が格闘する\r\nのも誰かに格闘させるのも、可能な限り避けたいところです。\r\n\r\n## 詳しくは･･･\r\n[プロジェクトWikiページ][2]を参照ください。\r\n\r\n## オープンソースライセンス\r\n本プロジェクトは、Apache License2.0を適用しています。  \r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\n[1]: http://jenkins-ci.org/ \"Jenkins\"\r\n[2]: https://github.com/tk0927/jpservant/wiki \"プロジェクトWikiページ\"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}